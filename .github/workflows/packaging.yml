# Copyright 2021-2023 Jetperch LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# GitHub actions
# See documentation: https://docs.github.com/en/actions
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# CMake example: https://github.com/Mizux/cmake-cpp/blob/main/.github/workflows/amd64_windows.yml


name: Packaging

on: ['push', 'pull_request']


env:
  PYTHON_VERSION: '3.11'


jobs:

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: Display info
        run: |
          echo "github.event_name=$GITHUB_EVENT_NAME"
          echo "github.ref=$GITHUB_REF"
          echo "github.ref_type=$GITHUB_REF_TYPE"
          echo "runner.os=$RUNNER_OS"
          echo "runner.arch=$RUNNER_ARCH"

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ubuntu dependencies
        run: sudo apt install -y libudev-dev libusb-1.0-0-dev qt6-base-dev qt6-3d-dev

      - name: Display version
        run: python -VV

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel pytest

      - name: Build package
        run: python -m build

      - name: Install package
        run: python -m pip install -f dist joulescope_ui

      - name: Run python unit tests
        run: pytest --pyargs joulescope_ui

      - name: Upload python source package
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  build_installers:
    name: Build on ${{ matrix.os }}
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install macOS certificates
        if: matrix.os == 'macos-latest'
        env:
          CERTIFICATE_APP: ${{ secrets.MACOS_CERTIFICATE_APP }}
          CERTIFICATE_INSTALLER:  ${{ secrets.MACOS_CERTIFICATE_INSTALLER }}
          CERTIFICATE_APP_PATH: ${{ runner.temp }}/certificate_app.p12
          ERTIFICATE_INSTALLER_PATH: ${{ runner.temp }}/certificate_installer.p12
          CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PWD: adrudfkyY45309i58c
          KEYCHAIN_PATH: ${{ runner.temp }}/build-keychain-db
        run: | 
          echo $CERTIFICATE_APP | base64 --decode -o $CERTIFICATE_APP_PATH
          echo $CERTIFICATE_INSTALLER | base64 --decode -o $CERTIFICATE_INSTALLER_PATH
          curl -O https://www.apple.com/certificateauthority/DeveloperIDCA.cer
          curl -O https://www.apple.com/certificateauthority/DeveloperIDG2CA.cer
          curl -O https://www.apple.com/certificateauthority/AppleWWDRCAG2.cer
          curl -O https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer
          curl -O https://www.apple.com/certificateauthority/AppleRootCA-G2.cer
          security create-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PWD" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security import $CERTIFICATE_APP_PATH -P "$CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_INSTALLER_PATH -P "$CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security add-certificates -k $KEYCHAIN_PATH DeveloperIDCA.cer DeveloperIDG2CA.cer AppleWWDRCAG2.cer AppleWWDRCAG3.cer AppleRootCA-G2.cer

      - name: Install Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -y libudev-dev libusb-1.0-0-dev qt6-base-dev qt6-3d-dev

      - name: Install python dependencies
        run: python -m pip install -r requirements.txt

      - name: Patch macOS to universal2
        run: python ci/macos_universal2.py

      - name: Create local files
        run: python setup.py sdist

      - name: Install pyinstaller
        run: python -m pip install pyinstaller

      - name: Build installer
        run: pyinstaller joulescope.spec

      - name: macOS notarize
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.MACOS_NOTARYTOOL_APPLE_ID }}
          NOTARYTOOL_PWD: ${{ secrets.MACOS_NOTARYTOOL_PWD }}
        run: |
          xcrun notarytool submit dist_installer/joulescope.dmg --apple-id "$APPLE_ID" --team-id "WFRS3L8Y7Y" --password "$NOTARYTOOL_PWD" --wait
          xcrun stapler staple dist_installer/joulescope.dmg

      - name: Save installer artifact
        uses: actions/upload-artifact@v3
        with:
          name: installers
          path: dist_installer/*
          if-no-files-found: error

  publish:
    name: Publish installers
    if: github.event_name == 'push' && startswith(github.ref, 'refs/tags/v')
    needs:
      - build_sdist
      - build_installers
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download installer artifact
        uses: actions/download-artifact@v3
        with:
          name: installers
          path: dist_installer/

      - name: Display artifacts
        shell: bash
        run: ls dist_installer/*

      - name: Publish Release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist_installer/*
